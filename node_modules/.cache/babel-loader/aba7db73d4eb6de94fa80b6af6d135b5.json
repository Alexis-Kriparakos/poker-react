{"ast":null,"code":"import _slicedToArray from \"/Users/alexis_fiz/Desktop/poker-rect/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/alexis_fiz/Desktop/poker-rect/src/component/Game.js\";\nimport React from 'react';\nimport Player from './Player.js';\nimport rateHand from '../help/help.js';\nimport './CSS-Playing-Cards/cards.css';\nimport './card.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeP1 = newHand => {\n      this.setState({\n        player1: {\n          player1Hand: newHand\n        }\n      });\n    };\n\n    this.handleChangeP2 = newHand => {\n      this.setState({\n        player2: {\n          player2Hand: newHand\n        }\n      });\n    };\n\n    this.state = {\n      game: {\n        unshuffledDeck: null,\n        deck: null,\n        winner: null,\n        pot: 0,\n        minBet: 100\n      },\n      player1: {\n        player1Hand: []\n      },\n      player2: {\n        player2Hand: []\n      }\n    };\n    this.handleChangeP1 = this.handleChangeP1.bind(this);\n    this.handleChangeP2 = this.handleChangeP2.bind(this);\n    this.displayResults = this.displayResults.bind(this);\n  }\n\n  createDeck() {\n    const SUITS = [\"spades\", \"diams\", \"clubs\", \"hearts\"];\n    const RANKS = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n    const WEIGHT = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n    let undeck = [];\n\n    for (let i = 0; i < SUITS.length; i++) {\n      for (let j = 0; j < RANKS.length; j++) {\n        let card = {\n          rank: RANKS[j],\n          suit: SUITS[i],\n          weight: WEIGHT[j]\n        };\n        undeck.push(card);\n      }\n    }\n\n    return undeck;\n  }\n\n  shuffleDeck(deck) {\n    let m = deck.length,\n        currentElem,\n        remainElem;\n\n    while (m) {\n      remainElem = Math.floor(Math.random() * m--);\n      currentElem = deck[m];\n      deck[m] = deck[remainElem];\n      deck[remainElem] = currentElem;\n    }\n\n    return deck;\n  }\n\n  StartGame() {\n    const unshuffledDeck = this.createDeck();\n    const deck = this.shuffleDeck(unshuffledDeck);\n    const hand1 = this.drawCards(5, deck);\n    const hand2 = this.drawCards(5, deck);\n    this.setState({\n      game: {\n        unshuffledDeck: unshuffledDeck,\n        deck: deck,\n        minBet: 100,\n        winner: null,\n        pot: 0\n      },\n      player1: {\n        player1Hand: hand1\n      },\n      player2: {\n        player2Hand: hand2\n      }\n    });\n  }\n\n  drawCards(numOfCards, deck) {\n    let hand = [];\n\n    for (let i = 0; i < numOfCards; i++) {\n      hand.push(deck.pop());\n    }\n\n    return hand;\n  }\n\n  displayResults() {\n    const _rateHand = rateHand(this.state.player1.player1Hand),\n          _rateHand2 = _slicedToArray(_rateHand, 2),\n          resultP1 = _rateHand2[0],\n          messageP1 = _rateHand2[1];\n\n    const _rateHand3 = rateHand(this.state.player2.player2Hand),\n          _rateHand4 = _slicedToArray(_rateHand3, 2),\n          resultP2 = _rateHand4[0],\n          messageP2 = _rateHand4[1];\n\n    const WINNER = resultP1 !== resultP2 ? resultP1 > resultP2 ? \"Player 1 WINS\" : \"Player 2 WINS\" : \"DRAW\";\n    this.setState({\n      winner: WINNER\n    });\n    console.log(`${WINNER}, \n        Player 1: ${messageP1}, \n        Player 2: ${messageP2}`);\n  }\n\n  componentWillMount() {\n    this.StartGame();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Player, {\n      deck: this.state.game.deck,\n      player: this.state.player1.player1Hand,\n      minBet: this.state.game.minBet,\n      handleChange: this.handleChangeP1,\n      displayResults: this.displayResults,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(Player, {\n      deck: this.state.game.deck,\n      player: this.state.player2.player2Hand,\n      minBet: this.state.game.minBet,\n      handleChange: this.handleChangeP2,\n      displayResults: this.displayResults,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/alexis_fiz/Desktop/poker-rect/src/component/Game.js"],"names":["React","Player","rateHand","Game","Component","constructor","props","handleChangeP1","newHand","setState","player1","player1Hand","handleChangeP2","player2","player2Hand","state","game","unshuffledDeck","deck","winner","pot","minBet","bind","displayResults","createDeck","SUITS","RANKS","WEIGHT","undeck","i","length","j","card","rank","suit","weight","push","shuffleDeck","m","currentElem","remainElem","Math","floor","random","StartGame","hand1","drawCards","hand2","numOfCards","hand","pop","resultP1","messageP1","resultP2","messageP2","WINNER","console","log","componentWillMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Player from './Player.js';\nimport rateHand from '../help/help.js';\nimport './CSS-Playing-Cards/cards.css';\nimport './card.css';\n\nclass Game extends React.Component {  \n    constructor(props){\n        super(props);\n        this.state = {\n          game: {\n            unshuffledDeck: null,\n            deck: null,\n            winner: null,\n            pot: 0,\n            minBet: 100,\n          },\n          player1: {\n            player1Hand: [],\n          },\n          player2: {\n            player2Hand: [],\n          }\n        }\n        this.handleChangeP1 = this.handleChangeP1.bind(this);\n        this.handleChangeP2 = this.handleChangeP2.bind(this);\n        this.displayResults = this.displayResults.bind(this);\n    }\n    handleChangeP1 = (newHand) => {\n      this.setState({\n        player1: {\n          player1Hand: newHand\n        }\n      })\n    }\n    handleChangeP2 = (newHand) => {\n      this.setState({\n        player2: {\n          player2Hand: newHand\n        }\n      })\n    }\n    createDeck() {\n        const SUITS = [\"spades\", \"diams\", \"clubs\", \"hearts\"];\n        const RANKS = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n        const WEIGHT = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n        let undeck = [];\n        for (let i = 0; i < SUITS.length; i++) {\n          for (let j = 0; j < RANKS.length; j++){\n            let card = {rank: RANKS[j], suit: SUITS[i], weight: WEIGHT[j]};\n            undeck.push(card);\n          }\n        }\n        return undeck;\n    }\n    shuffleDeck(deck) {\n        let m = deck.length, currentElem, remainElem;\n          while (m) {\n            remainElem = Math.floor(Math.random() * m--);\n            currentElem = deck[m];\n            deck[m] = deck[remainElem];\n            deck[remainElem] = currentElem;\n        } \n        return deck;\n      }\n    StartGame(){\n      const unshuffledDeck = this.createDeck();\n      const deck = this.shuffleDeck(unshuffledDeck);\n      const hand1 = this.drawCards(5, deck);\n      const hand2 = this.drawCards(5, deck);\n      this.setState({\n        game:{\n          unshuffledDeck: unshuffledDeck,\n          deck: deck,\n          minBet: 100,\n          winner: null,\n          pot: 0,\n        },\n        player1: {\n          player1Hand: hand1,\n        },\n        player2: {\n          player2Hand: hand2,\n        }\n      })\n    };\n    drawCards(numOfCards, deck){\n      let hand = [];\n        for (let i = 0; i < numOfCards; i++) {\n          hand.push(deck.pop());\n        }\n      return hand;\n    }\n    displayResults() {\n        const [resultP1, messageP1] = rateHand(this.state.player1.player1Hand);\n        const [resultP2, messageP2] = rateHand(this.state.player2.player2Hand);\n        const WINNER = resultP1 !== resultP2 ? \n        resultP1 > resultP2 ? \"Player 1 WINS\" : \"Player 2 WINS\" \n        : \"DRAW\";\n        this.setState({\n          winner: WINNER\n        });\n        console.log(`${WINNER}, \n        Player 1: ${messageP1}, \n        Player 2: ${messageP2}`);\n    }\n    componentWillMount(){\n      this.StartGame();\n      }\n\n      render(){\n        return(\n          <div>\n            <Player \n            deck={this.state.game.deck} \n            player={this.state.player1.player1Hand} \n            minBet={this.state.game.minBet}\n            handleChange={this.handleChangeP1}\n            displayResults={this.displayResults}\n            />           \n            <Player \n            deck={this.state.game.deck} \n            player={this.state.player2.player2Hand} \n            minBet={this.state.game.minBet}\n            handleChange={this.handleChangeP2}\n            displayResults={this.displayResults}\n            />           \n          </div>\n        );\n      }\n}\n\nexport default Game;\n\n\n \n\n\n"]},"metadata":{},"sourceType":"module"}