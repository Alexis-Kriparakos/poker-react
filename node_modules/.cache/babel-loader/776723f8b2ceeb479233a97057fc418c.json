{"ast":null,"code":"import { groupBy } from \"lodash\";\nimport _ from \"lodash\";\n\nconst maxInARow = weights => _.chain(weights).sortBy().uniq().map((num, i) => num - i).groupBy().orderBy(\"length\").last().value().length;\n\nclass rateCards {\n  constructor(hand) {\n    this.ranks = groupBy(hand, \"rank\");\n    this.suits = groupBy(hand, \"suit\");\n    this.rankTimes = groupBy(this.ranks, \"length\");\n    this.suitsTimes = groupBy(this.suits, \"length\");\n    this.maxInARow = maxInARow(hand.map(({\n      weight\n    }) => weight));\n  }\n\n  getOfSameRank(n) {\n    return this.rankTimes[n] || [];\n  }\n\n  hasOfSameRank(n) {\n    return this.getOfSameRank(n).length;\n  }\n\n  getOfSameSuit(n) {\n    return this.suitsTimes[n] || [];\n  }\n\n  hasOfSameSuit(n) {\n    return this.getOfSameSuit(n).length;\n  }\n\n  hasAce() {\n    return !!this.ranks[\"A\"];\n  }\n\n  hasInARow(n) {\n    return this.maxInARow >= n;\n  }\n\n}\n\nconst PokerRatings = {\n  RoyalFlush: hand => hand.hasInARow(5) && hand.hasOfSameSuit(5) && hand.hasAce(),\n  StraightFlush: hand => hand.hasInARow(5) && hand.hasOfSameSuit(5),\n  FourOfAKind: hand => hand.hasOfSameRank(4),\n  FullHouse: hand => hand.hasOfSameRank(3) && hand.hasOfSameRank(2),\n  Flush: hand => hand.hasOfSameSuit(5),\n  Straight: hand => hand.hasInARow(5),\n  ThreeOfAKind: hand => hand.hasOfSameRank(3),\n  TwoPair: hand => hand.hasOfSameRank(2) >= 2,\n  OnePair: hand => hand.hasOfSameRank(2),\n  HighCard: hand => hand.hasOfSameRank(1) >= 5\n};\n\nconst PokerHandRate = cards => Object.entries(PokerRatings).find(([, is]) => is(cards))[0];\n\nclass manageCardGame {\n  constructor() {\n    this.createDeck = () => {\n      const SUITS = [\"spades\", \"diams\", \"clubs\", \"hearts\"];\n      const RANKS = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n      const WEIGHT = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n      let unshuffledDeck = [];\n\n      for (let i = 0; i < SUITS.length; i++) {\n        for (let j = 0; j < RANKS.length; j++) {\n          let card = {\n            rank: RANKS[j],\n            suit: SUITS[i],\n            weight: WEIGHT[j]\n          };\n          unshuffledDeck.push(card);\n        }\n      }\n\n      return shuffleDeck(unshuffledDeck);\n    };\n\n    this.shuffleDeck = deck => {\n      let m = deck.length,\n          currentElem,\n          remainElem;\n\n      while (m) {\n        remainElem = Math.floor(Math.random() * m--);\n        currentElem = deck[m];\n        deck[m] = deck[remainElem];\n        deck[remainElem] = currentElem;\n      }\n\n      return deck;\n    };\n\n    this.drawCards = (numOfCards, deck) => {\n      let hand = [];\n\n      for (let i = 0; i < numOfCards; i++) {\n        hand.push(deck.pop());\n      }\n\n      return hand;\n    };\n\n    this.deck = [];\n    this.player1Hand = [];\n    this.player2Hand = [];\n  }\n\n}\n\nconst pokerManager = new manageCardPokerGame();\nconst createDeck = pokerManager.createDeck,\n      shuffleDeck = pokerManager.shuffleDeck,\n      drawCards = pokerManager.drawCards;\nexport { PokerHandRate, pokerManager, createDeck, shuffleDeck, drawCards, rateCards };","map":{"version":3,"sources":["/Users/alexis_fiz/Desktop/poker-rect/src/poker/poker.js"],"names":["groupBy","_","maxInARow","weights","chain","sortBy","uniq","map","num","i","orderBy","last","value","length","rateCards","constructor","hand","ranks","suits","rankTimes","suitsTimes","weight","getOfSameRank","n","hasOfSameRank","getOfSameSuit","hasOfSameSuit","hasAce","hasInARow","PokerRatings","RoyalFlush","StraightFlush","FourOfAKind","FullHouse","Flush","Straight","ThreeOfAKind","TwoPair","OnePair","HighCard","PokerHandRate","cards","Object","entries","find","is","manageCardGame","createDeck","SUITS","RANKS","WEIGHT","unshuffledDeck","j","card","rank","suit","push","shuffleDeck","deck","m","currentElem","remainElem","Math","floor","random","drawCards","numOfCards","pop","player1Hand","player2Hand","pokerManager","manageCardPokerGame"],"mappings":"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","sourcesContent":["import { groupBy } from \"lodash\";\nimport _ from \"lodash\";\n\nconst maxInARow = weights =>\n  _.chain(weights)\n    .sortBy()\n    .uniq()\n    .map((num, i) => num - i)\n    .groupBy()\n    .orderBy(\"length\")\n    .last()\n    .value().length;\n\n\nclass rateCards {\n  constructor(hand) {\n    this.ranks = groupBy(hand, \"rank\");\n    this.suits = groupBy(hand, \"suit\");\n    this.rankTimes = groupBy(this.ranks, \"length\");\n    this.suitsTimes = groupBy(this.suits, \"length\");\n    this.maxInARow = maxInARow(hand.map(({ weight }) => weight));\n  }\n    \n  getOfSameRank(n) {\n    return this.rankTimes[n] || [];\n  }\n    \n  hasOfSameRank(n) {\n    return this.getOfSameRank(n).length;\n  }\n    \n  getOfSameSuit(n) {\n    return this.suitsTimes[n] || [];\n  }\n    \n  hasOfSameSuit(n) {\n    return this.getOfSameSuit(n).length;\n  }\n  hasAce() {\n    return !!this.ranks[\"A\"];\n  }\n    \n  hasInARow(n) {\n    return this.maxInARow >= n;\n  }\n}\n    \nconst PokerRatings = {\n  RoyalFlush: hand => hand.hasInARow(5) && hand.hasOfSameSuit(5) && hand.hasAce(),\n  StraightFlush: hand => hand.hasInARow(5) && hand.hasOfSameSuit(5),\n  FourOfAKind: hand => hand.hasOfSameRank(4),\n  FullHouse: hand => hand.hasOfSameRank(3) && hand.hasOfSameRank(2),\n  Flush: hand => hand.hasOfSameSuit(5),\n  Straight: hand => hand.hasInARow(5),\n  ThreeOfAKind: hand => hand.hasOfSameRank(3),\n  TwoPair: hand => hand.hasOfSameRank(2) >= 2,\n  OnePair: hand => hand.hasOfSameRank(2),\n  HighCard: hand => hand.hasOfSameRank(1) >= 5\n};\n    \nconst PokerHandRate = cards =>\n  Object.entries(PokerRatings).find(([, is]) => is(cards))[0];\n  \nclass manageCardGame {\n  constructor(){\n    this.deck = [];\n    this.player1Hand = [];\n    this.player2Hand = [];\n  }\n  createDeck = () => {\n    const SUITS = [\"spades\", \"diams\", \"clubs\", \"hearts\"];\n    const RANKS = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n    const WEIGHT = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n    let unshuffledDeck = [];\n    for (let i = 0; i < SUITS.length; i++) {\n      for (let j = 0; j < RANKS.length; j++){\n        let card = {rank: RANKS[j], suit: SUITS[i], weight: WEIGHT[j]};\n        unshuffledDeck.push(card);\n      }\n    }\n    return shuffleDeck(unshuffledDeck);\n  };\n\n  shuffleDeck = (deck) => {\n    let m = deck.length, currentElem, remainElem;\n    while (m) {\n      remainElem = Math.floor(Math.random() * m--);\n      currentElem = deck[m];\n      deck[m] = deck[remainElem];\n      deck[remainElem] = currentElem;\n    } \n    return deck;\n  }\n  drawCards = (numOfCards, deck) => {\n    let hand = [];\n    for (let i = 0; i < numOfCards; i++) {\n      hand.push(deck.pop());\n    }\n    return hand;\n  };\n}   \n\nconst pokerManager = new manageCardPokerGame();\nconst {createDeck, shuffleDeck, drawCards} = pokerManager;\n\nexport {\n  PokerHandRate,\n  pokerManager,\n  createDeck,\n  shuffleDeck,\n  drawCards,\n  rateCards\n};\n\n"]},"metadata":{},"sourceType":"module"}