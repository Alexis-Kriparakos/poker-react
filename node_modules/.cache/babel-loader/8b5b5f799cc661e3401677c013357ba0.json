{"ast":null,"code":"var _jsxFileName = \"/Users/alexis_fiz/Desktop/poker-rect/src/component/Game.js\";\nimport React from 'react';\nimport Player from './Player.js';\nimport './CSS-Playing-Cards/cards.css';\nimport './card.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      unshuffledDeck: null,\n      deck: null,\n      player1Hand: [],\n      player2Hand: [],\n      winner: null\n    };\n  }\n\n  StartGame() {\n    const undeck = this.createDeck();\n    const deck = this.shuffleDeck(undeck);\n    const hand1 = this.drawCards(5, deck);\n    const hand2 = this.drawCards(5, deck);\n    this.setState({\n      unshuffledDeck: undeck,\n      deck: deck,\n      player1Hand: hand1,\n      player2Hand: hand2,\n      winner: null\n    });\n  }\n\n  drawCards(numOfCards, deck) {\n    let hand = [];\n\n    for (let i = 0; i < numOfCards; i++) {\n      hand.push(deck.pop());\n    }\n\n    return hand;\n  }\n\n  createDeck() {\n    const SUITS = [\"spades\", \"diams\", \"clubs\", \"hearts\"];\n    const RANKS = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n    const WEIGHT = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n    let undeck = [];\n\n    for (let i = 0; i < SUITS.length; i++) {\n      for (let j = 0; j < RANKS.length; j++) {\n        let card = {\n          rank: RANKS[j],\n          suit: SUITS[i],\n          weight: WEIGHT[j]\n        };\n        undeck.push(card);\n      }\n    }\n\n    return undeck;\n  }\n\n  shuffleDeck(deck) {\n    let m = deck.length,\n        currentElem,\n        remainElem;\n\n    while (m) {\n      remainElem = Math.floor(Math.random() * m--);\n      currentElem = deck[m];\n      deck[m] = deck[remainElem];\n      deck[remainElem] = currentElem;\n    }\n\n    return deck;\n  }\n\n  componentWillMount() {\n    this.StartGame();\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Player, {\n      player: this.state.player1Hand,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Player, {\n      player: this.state.player2Hand,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;\n\nconst groupBy = (list, grouper) => {\n  const fGrouper = typeof grouper === 'function' ? grouper : item => item[grouper];\n  const fList = list instanceof Array ? list : Object.values(list);\n  return fList.reduce((groups, item) => {\n    const group = fGrouper(item);\n\n    if (!groups[group]) {\n      groups[group] = [];\n    }\n\n    groups[group].push(item);\n    return groups;\n  }, {});\n};\n\nconst groupHandBySuit = hand => {\n  return Object.keys(groupBy(hand, card => card.suit));\n};\n\nconst groupHandByWeight = hand => {\n  return Object.keys(groupBy(hand, card => card.weight)).map(cardWeight => parseInt(cardWeight));\n};\n\nconst groupHand = (hand, num) => {\n  return Object.values(groupBy(hand, card => card.rank)).filter(sameCards => sameCards.length === num);\n};\n\nconst groupByPair = hand => groupHand(hand, 2);\n\nconst groupByThree = hand => groupHand(hand, 3);\n\nconst groupByFour = hand => groupHand(hand, 4);\n\nconst hasAce = hand => groupHandByWeight(hand).includes(14);\n\nconst isFullHouse = hand => groupByPair(hand).length === 1 && groupByThree(hand).length === 1;\n\nconst isTwoPairs = hand => groupByPair(hand).length === 2;\n\nconst isPair = hand => groupByPair(hand).length === 1;\n\nconst isThreeofKind = hand => groupByThree(hand).length === 1;\n\nconst isFourOfKind = hand => groupByFour(hand).length === 1;\n\nconst isFlush = hand => groupHandBySuit(hand).length === 1;\n\nconst isHighCard = hand => groupHandByWeight(hand).length === 5;\n\nconst isStraightFlash = hand => isFlush(hand) && isFiveInRow(hand);\n\nconst isRoyalFlash = hand => isFlush(hand) && isFiveInRow(hand) && hasAce(hand);\n\nconst isFiveInRow = hand => {\n  let max = Math.max(...groupHandByWeight(hand));\n  let min = Math.min(...groupHandByWeight(hand));\n  return max - min === groupHandByWeight(hand).length - 1 && groupHandByWeight(hand).length === 5 ? true : false;\n};\n\nfunction rateHand(hand) {\n  switch (true) {\n    case isFullHouse(hand):\n      return \"You have a Full House\";\n\n    case isFourOfKind(hand):\n      return \"You have four of a kind\";\n\n    case isThreeofKind(hand):\n      return \"You have three of a kind\";\n\n    case isTwoPairs(hand):\n      return \"You have two pairs\";\n\n    case isPair(hand):\n      return \"You have a pair\";\n\n    case isRoyalFlash(hand):\n      return \"You have a Royal Flash\";\n\n    case isStraightFlash(hand):\n      return \"You have a Straight Flash\";\n\n    case isFlush(hand):\n      return \"You have a flash\";\n\n    case isFiveInRow(hand):\n      return \"You have a straight\";\n\n    case isHighCard(hand):\n      return \"No matching cards\";\n  }\n}","map":{"version":3,"sources":["/Users/alexis_fiz/Desktop/poker-rect/src/component/Game.js"],"names":["React","Player","Game","Component","constructor","props","state","unshuffledDeck","deck","player1Hand","player2Hand","winner","StartGame","undeck","createDeck","shuffleDeck","hand1","drawCards","hand2","setState","numOfCards","hand","i","push","pop","SUITS","RANKS","WEIGHT","length","j","card","rank","suit","weight","m","currentElem","remainElem","Math","floor","random","componentWillMount","render","console","log","groupBy","list","grouper","fGrouper","item","fList","Array","Object","values","reduce","groups","group","groupHandBySuit","keys","groupHandByWeight","map","cardWeight","parseInt","groupHand","num","filter","sameCards","groupByPair","groupByThree","groupByFour","hasAce","includes","isFullHouse","isTwoPairs","isPair","isThreeofKind","isFourOfKind","isFlush","isHighCard","isStraightFlash","isFiveInRow","isRoyalFlash","max","min","rateHand"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Player from './Player.js';\nimport './CSS-Playing-Cards/cards.css';\nimport './card.css';\n\nclass Game extends React.Component {  \n    constructor(props){\n        super(props);\n        this.state = {\n            unshuffledDeck: null,\n            deck: null,\n            player1Hand: [],\n            player2Hand: [],\n            winner: null\n        }\n        \n    }\n    StartGame(){\n      const undeck = this.createDeck();\n      const deck = this.shuffleDeck(undeck);\n      const hand1 = this.drawCards(5, deck);\n      const hand2 = this.drawCards(5, deck);\n      this.setState({\n        unshuffledDeck: undeck,\n        deck: deck,\n        player1Hand: hand1,\n        player2Hand: hand2,\n        winner: null\n      })\n    };\n    drawCards(numOfCards, deck){\n      let hand = [];\n        for (let i = 0; i < numOfCards; i++) {\n          hand.push(deck.pop());\n        }\n      return hand;\n    }\n    createDeck() {\n        const SUITS = [\"spades\", \"diams\", \"clubs\", \"hearts\"];\n        const RANKS = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n        const WEIGHT = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n        let undeck = [];\n        for (let i = 0; i < SUITS.length; i++) {\n          for (let j = 0; j < RANKS.length; j++){\n            let card = {rank: RANKS[j], suit: SUITS[i], weight: WEIGHT[j]};\n            undeck.push(card);\n          }\n        }\n        return undeck;\n    }\n    shuffleDeck(deck) {\n        let m = deck.length, currentElem, remainElem;\n          while (m) {\n            remainElem = Math.floor(Math.random() * m--);\n            currentElem = deck[m];\n            deck[m] = deck[remainElem];\n            deck[remainElem] = currentElem;\n        } \n        return deck;\n      } \n      \n\n      \n       componentWillMount(){\n         this.StartGame();  \n       }\n\n      render(){\n        console.log(this.state);\n        return(\n          <div>\n            <Player player={this.state.player1Hand}/>\n            <Player player={this.state.player2Hand}/>\n          \n          </div>\n        );\n      }\n}\n\nexport default Game;\n\n\nconst groupBy = (list, grouper) => {\n  const fGrouper = typeof grouper === 'function' ? grouper : item => item[grouper];\n  const fList = list instanceof Array ? list : Object.values(list);\n\n  return fList.reduce(\n    (groups, item) => {\n      const group = fGrouper(item);\n      if (!groups[group]) {\n          groups[group] = []\n      }\n      groups[group].push(item)\n      return groups;\n    },\n    {}\n  )\n}\nconst groupHandBySuit = (hand) => {\n  return Object.keys(groupBy(hand, card => card.suit));\n}\nconst groupHandByWeight = (hand) => {\n  return Object.keys(groupBy(hand, card => card.weight)).map((cardWeight) => parseInt(cardWeight));\n}\nconst groupHand = (hand,num) => {\n  return Object.values(groupBy(hand, card => card.rank))\n  .filter(sameCards => sameCards.length === num);\n}\n\nconst groupByPair =(hand) => groupHand(hand, 2);\nconst groupByThree =(hand) => groupHand(hand, 3);\nconst groupByFour = (hand) => groupHand(hand, 4);\nconst hasAce = (hand) => groupHandByWeight(hand).includes(14);\nconst isFullHouse = (hand) => groupByPair(hand).length === 1 && groupByThree(hand).length === 1;\nconst isTwoPairs = (hand) => groupByPair(hand).length === 2;\nconst isPair = (hand) => groupByPair(hand).length === 1;\nconst isThreeofKind = (hand) => groupByThree(hand).length === 1;\nconst isFourOfKind = (hand) => groupByFour(hand).length === 1;\nconst isFlush = (hand) => groupHandBySuit(hand).length === 1;\nconst isHighCard = (hand) => groupHandByWeight(hand).length === 5;\nconst isStraightFlash = (hand) => isFlush(hand) && isFiveInRow(hand);\nconst isRoyalFlash = (hand) => isFlush(hand) && isFiveInRow(hand) && hasAce(hand);\nconst isFiveInRow = (hand) => {\n  let max = Math.max(...groupHandByWeight(hand)); \n  let min = Math.min(...groupHandByWeight(hand));\n  return max-min === groupHandByWeight(hand).length-1 && groupHandByWeight(hand).length === 5 ? true : false;\n};\n\nfunction rateHand(hand){\n  switch (true) {\n    case isFullHouse(hand):\n      return \"You have a Full House\";\n    case isFourOfKind(hand):\n      return \"You have four of a kind\";\n    case isThreeofKind(hand):\n      return \"You have three of a kind\";\n    case isTwoPairs(hand):\n      return \"You have two pairs\";\n    case isPair(hand):\n      return \"You have a pair\";\n      case isRoyalFlash(hand):\n      return \"You have a Royal Flash\";\n    case isStraightFlash(hand):\n      return \"You have a Straight Flash\";\n    case isFlush(hand):\n      return \"You have a flash\";\n    case isFiveInRow(hand):\n      return \"You have a straight\"\n    case isHighCard(hand):\n      return \"No matching cards\";\n  }\n}"]},"metadata":{},"sourceType":"module"}