{"ast":null,"code":"var _jsxFileName = \"/Users/alexis_fiz/Desktop/poker-rect/src/component/Game.js\";\nimport React from 'react';\nimport Player from './Player.js';\nimport './CSS-Playing-Cards/cards.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      unshuffledDeck: this.createDeck(),\n      deck: this.shuffleDeck(this.createDeck()),\n      player1Hand: [],\n      player2Hand: [],\n      winner: null\n    };\n  }\n\n  StartGame() {\n    const undeck = this.createDeck();\n    const deck = this.shuffleDeck(undeck);\n    const hand1 = this.drawCards(5, deck);\n    const hand2 = this.drawCards(5, deck);\n    this.setState({\n      unshuffledDeck: undeck,\n      deck: deck,\n      player1Hand: hand1,\n      player2Hand: hand2,\n      winner: null\n    });\n  }\n\n  drawCards(numOfCards, deck) {\n    let hand = [];\n\n    for (let i = 0; i < numOfCards; i++) {\n      hand.push(deck.pop());\n    }\n\n    return hand;\n  }\n\n  createDeck() {\n    const SUITS = [\"spades\", \"diamonds\", \"clubs\", \"hearts\"];\n    const RANKS = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n    const WEIGHT = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n    let deck = [];\n\n    for (let i = 0; i < SUITS.length; i++) {\n      for (let j = 0; j < RANKS.length; j++) {\n        let card = {\n          rank: RANKS[j],\n          suit: SUITS[i],\n          weight: WEIGHT[j]\n        };\n        deck.push(card);\n      }\n    }\n\n    return deck;\n  }\n\n  shuffleDeck(deck) {\n    let m = deck.length,\n        currentElem,\n        remainElem;\n\n    while (m) {\n      remainElem = Math.floor(Math.random() * m--);\n      currentElem = deck[m];\n      deck[m] = deck[remainElem];\n      deck[remainElem] = currentElem;\n    }\n\n    return deck;\n  } // drawCards(numOfCards) {\n  //   let hand1 = [...this.state.player1Hand];\n  //   let hand2 = [...this.state.player2Hand];\n  //   let deck = [...this.state.deck];\n  //   for (let i = 0; i < numOfCards; i++) {\n  //     hand1.push(deck.pop());\n  //     hand2.push(deck.pop());\n  //   }\n  //   this.setState({\n  //     deck: deck,\n  //     player1Hand: hand1,\n  //     player2Hand: hand2,         \n  //   });\n  // }\n\n\n  componentWillMount() {\n    this.StartGame();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Player, {\n      player1: this.state.player1Hand,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/alexis_fiz/Desktop/poker-rect/src/component/Game.js"],"names":["React","Player","Game","Component","constructor","props","state","unshuffledDeck","createDeck","deck","shuffleDeck","player1Hand","player2Hand","winner","StartGame","undeck","hand1","drawCards","hand2","setState","numOfCards","hand","i","push","pop","SUITS","RANKS","WEIGHT","length","j","card","rank","suit","weight","m","currentElem","remainElem","Math","floor","random","componentWillMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,+BAAP;;AAEA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,cAAc,EAAE,KAAKC,UAAL,EADP;AAETC,MAAAA,IAAI,EAAE,KAAKC,WAAL,CAAiB,KAAKF,UAAL,EAAjB,CAFG;AAGTG,MAAAA,WAAW,EAAE,EAHJ;AAITC,MAAAA,WAAW,EAAE,EAJJ;AAKTC,MAAAA,MAAM,EAAE;AALC,KAAb;AAOH;;AACDC,EAAAA,SAAS,GAAE;AACT,UAAMC,MAAM,GAAG,KAAKP,UAAL,EAAf;AACA,UAAMC,IAAI,GAAG,KAAKC,WAAL,CAAiBK,MAAjB,CAAb;AACA,UAAMC,KAAK,GAAG,KAAKC,SAAL,CAAe,CAAf,EAAkBR,IAAlB,CAAd;AACA,UAAMS,KAAK,GAAG,KAAKD,SAAL,CAAe,CAAf,EAAkBR,IAAlB,CAAd;AACA,SAAKU,QAAL,CAAc;AACZZ,MAAAA,cAAc,EAAEQ,MADJ;AAEZN,MAAAA,IAAI,EAAEA,IAFM;AAGZE,MAAAA,WAAW,EAAEK,KAHD;AAIZJ,MAAAA,WAAW,EAAEM,KAJD;AAKZL,MAAAA,MAAM,EAAE;AALI,KAAd;AAOD;;AACDI,EAAAA,SAAS,CAACG,UAAD,EAAaX,IAAb,EAAkB;AACzB,QAAIY,IAAI,GAAG,EAAX;;AACE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAApB,EAAgCE,CAAC,EAAjC,EAAqC;AACnCD,MAAAA,IAAI,CAACE,IAAL,CAAUd,IAAI,CAACe,GAAL,EAAV;AACD;;AACH,WAAOH,IAAP;AACD;;AACDb,EAAAA,UAAU,GAAG;AACT,UAAMiB,KAAK,GAAG,CAAC,QAAD,EAAW,UAAX,EAAuB,OAAvB,EAAgC,QAAhC,CAAd;AACA,UAAMC,KAAK,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,IAAzC,EAA+C,GAA/C,EAAoD,GAApD,EAAyD,GAAzD,EAA8D,GAA9D,CAAd;AACA,UAAMC,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,CAAf;AACA,QAAIlB,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,KAAK,CAACG,MAA1B,EAAkCN,CAAC,EAAnC,EAAuC;AACrC,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACE,MAA1B,EAAkCC,CAAC,EAAnC,EAAsC;AACpC,YAAIC,IAAI,GAAG;AAACC,UAAAA,IAAI,EAAEL,KAAK,CAACG,CAAD,CAAZ;AAAiBG,UAAAA,IAAI,EAAEP,KAAK,CAACH,CAAD,CAA5B;AAAiCW,UAAAA,MAAM,EAAEN,MAAM,CAACE,CAAD;AAA/C,SAAX;AACApB,QAAAA,IAAI,CAACc,IAAL,CAAUO,IAAV;AACD;AACF;;AACD,WAAOrB,IAAP;AACH;;AACDC,EAAAA,WAAW,CAACD,IAAD,EAAO;AACd,QAAIyB,CAAC,GAAGzB,IAAI,CAACmB,MAAb;AAAA,QAAqBO,WAArB;AAAA,QAAkCC,UAAlC;;AACE,WAAOF,CAAP,EAAU;AACRE,MAAAA,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,CAAC,EAA5B,CAAb;AACAC,MAAAA,WAAW,GAAG1B,IAAI,CAACyB,CAAD,CAAlB;AACAzB,MAAAA,IAAI,CAACyB,CAAD,CAAJ,GAAUzB,IAAI,CAAC2B,UAAD,CAAd;AACA3B,MAAAA,IAAI,CAAC2B,UAAD,CAAJ,GAAmBD,WAAnB;AACH;;AACD,WAAO1B,IAAP;AACD,GArD4B,CAsD7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC+B,EAAAA,kBAAkB,GAAE;AAClB,SAAK1B,SAAL;AACD;;AAEF2B,EAAAA,MAAM,GAAE;AAEN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKnC,KAAL,CAAWK,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AA/E4B;;AAkFnC,eAAeT,IAAf","sourcesContent":["import React from 'react';\nimport Player from './Player.js';\nimport './CSS-Playing-Cards/cards.css';\n\nclass Game extends React.Component {  \n    constructor(props){\n        super(props);\n        this.state = {\n            unshuffledDeck: this.createDeck(),\n            deck: this.shuffleDeck(this.createDeck()),\n            player1Hand: [],\n            player2Hand: [],\n            winner: null\n        }\n    }\n    StartGame(){\n      const undeck = this.createDeck();\n      const deck = this.shuffleDeck(undeck);\n      const hand1 = this.drawCards(5, deck);\n      const hand2 = this.drawCards(5, deck);\n      this.setState({\n        unshuffledDeck: undeck,\n        deck: deck,\n        player1Hand: hand1,\n        player2Hand: hand2,\n        winner: null\n      })\n    };\n    drawCards(numOfCards, deck){\n      let hand = [];\n        for (let i = 0; i < numOfCards; i++) {\n          hand.push(deck.pop());\n        }\n      return hand;\n    }\n    createDeck() {\n        const SUITS = [\"spades\", \"diamonds\", \"clubs\", \"hearts\"];\n        const RANKS = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n        const WEIGHT = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n        let deck = [];\n        for (let i = 0; i < SUITS.length; i++) {\n          for (let j = 0; j < RANKS.length; j++){\n            let card = {rank: RANKS[j], suit: SUITS[i], weight: WEIGHT[j]};\n            deck.push(card);\n          }\n        }\n        return deck;\n    }\n    shuffleDeck(deck) {\n        let m = deck.length, currentElem, remainElem;\n          while (m) {\n            remainElem = Math.floor(Math.random() * m--);\n            currentElem = deck[m];\n            deck[m] = deck[remainElem];\n            deck[remainElem] = currentElem;\n        } \n        return deck;\n      }\n      // drawCards(numOfCards) {\n      //   let hand1 = [...this.state.player1Hand];\n      //   let hand2 = [...this.state.player2Hand];\n      //   let deck = [...this.state.deck];\n      //   for (let i = 0; i < numOfCards; i++) {\n      //     hand1.push(deck.pop());\n      //     hand2.push(deck.pop());\n      //   }\n      //   this.setState({\n      //     deck: deck,\n      //     player1Hand: hand1,\n      //     player2Hand: hand2,         \n      //   });\n      // }\n       componentWillMount(){\n         this.StartGame();\n       }\n\n      render(){\n        \n        return(\n          <div>\n            <Player player1={this.state.player1Hand}/>\n          </div>\n        );\n      }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}