{"ast":null,"code":"const HAND_VALUE = {\n  highCard: 1,\n  pair: 2,\n  twoPair: 3,\n  threeOfKind: 4,\n  straight: 5,\n  flush: 6,\n  fullHouse: 7,\n  fourOfKind: 8,\n  straightFlush: 9,\n  royalFlush: 10\n};\n\nconst groupBy = (list, grouper) => {\n  const fGrouper = typeof grouper === 'function' ? grouper : item => item[grouper];\n  const fList = list instanceof Array ? list : Object.values(list);\n  return fList.reduce((groups, item) => {\n    const group = fGrouper(item);\n\n    if (!groups[group]) {\n      groups[group] = [];\n    }\n\n    groups[group].push(item);\n    return groups;\n  }, {});\n};\n\nconst groupHandBySuit = hand => {\n  return Object.keys(groupBy(hand, card => card.suit));\n};\n\nconst groupHandByWeight = hand => {\n  return Object.keys(groupBy(hand, card => card.weight)).map(cardWeight => parseInt(cardWeight));\n};\n\nconst groupHand = (hand, num) => {\n  return Object.values(groupBy(hand, card => card.rank)).filter(sameCards => sameCards.length === num);\n};\n\nconst groupByPair = hand => groupHand(hand, 2);\n\nconst groupByThree = hand => groupHand(hand, 3);\n\nconst groupByFour = hand => groupHand(hand, 4);\n\nconst hasAce = hand => groupHandByWeight(hand).includes(14);\n\nconst isFullHouse = hand => groupByPair(hand).length === 1 && groupByThree(hand).length === 1;\n\nconst isTwoPairs = hand => groupByPair(hand).length === 2;\n\nconst isPair = hand => groupByPair(hand).length === 1;\n\nconst isThreeofKind = hand => groupByThree(hand).length === 1;\n\nconst isFourOfKind = hand => groupByFour(hand).length === 1;\n\nconst isFlush = hand => groupHandBySuit(hand).length === 1;\n\nconst isHighCard = hand => groupHandByWeight(hand).length === 5;\n\nconst isStraightFlash = hand => isFlush(hand) && isFiveInRow(hand);\n\nconst isRoyalFlash = hand => isFlush(hand) && isFiveInRow(hand) && hasAce(hand);\n\nconst isFiveInRow = hand => {\n  let max = Math.max(...groupHandByWeight(hand));\n  let min = Math.min(...groupHandByWeight(hand));\n  return max - min === groupHandByWeight(hand).length - 1 && groupHandByWeight(hand).length === 5 ? true : false;\n};\n\nexport const rateHand = hand => {\n  let handValue = null;\n  let message = '';\n\n  switch (true) {\n    case isFullHouse(hand):\n      handValue = HAND_VALUE.fullHouse;\n      message = \"You have a Full House\";\n      return [handValue, message];\n\n    case isFourOfKind(hand):\n      handValue = HAND_VALUE.fourOfKind;\n      message = \"You have four of a kind\";\n      return [handValue, message];\n\n    case isThreeofKind(hand):\n      handValue = HAND_VALUE.threeOfKind;\n      message = \"You have three of a kind\";\n      return [handValue, message];\n\n    case isTwoPairs(hand):\n      handValue = HAND_VALUE.twoPair;\n      message = \"You have two pairs\";\n      return [handValue, message];\n\n    case isPair(hand):\n      handValue = HAND_VALUE.pair;\n      message = \"You have a pair\";\n      return [handValue, message];\n\n    case isRoyalFlash(hand):\n      handValue = HAND_VALUE.royalFlush;\n      message = \"You have a Royal Flash\";\n      return [handValue, message];\n\n    case isStraightFlash(hand):\n      handValue = HAND_VALUE.straightFlush;\n      message = \"You have a Straight Flash\";\n      return [handValue, message];\n\n    case isFlush(hand):\n      handValue = HAND_VALUE.flush;\n      message = \"You have a flash\";\n      return [handValue, message];\n\n    case isFiveInRow(hand):\n      handValue = HAND_VALUE.straight;\n      message = \"You have a straight\";\n      return [handValue, message];\n\n    case isHighCard(hand):\n      handValue = HAND_VALUE.highCard;\n      message = \"No matching cards\";\n      return [handValue, message];\n  }\n};\nexport const createDeck = () => {\n  const SUITS = [\"spades\", \"diams\", \"clubs\", \"hearts\"];\n  const RANKS = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n  const WEIGHT = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n  let undeck = [];\n\n  for (let i = 0; i < SUITS.length; i++) {\n    for (let j = 0; j < RANKS.length; j++) {\n      let card = {\n        rank: RANKS[j],\n        suit: SUITS[i],\n        weight: WEIGHT[j]\n      };\n      undeck.push(card);\n    }\n  }\n\n  return undeck;\n};\nexport const shuffleDeck = deck => {\n  let m = deck.length,\n      currentElem,\n      remainElem;\n\n  while (m) {\n    remainElem = Math.floor(Math.random() * m--);\n    currentElem = deck[m];\n    deck[m] = deck[remainElem];\n    deck[remainElem] = currentElem;\n  }\n\n  return deck;\n};","map":{"version":3,"sources":["/Users/alexis_fiz/Desktop/poker-rect/src/help/help.js"],"names":["HAND_VALUE","highCard","pair","twoPair","threeOfKind","straight","flush","fullHouse","fourOfKind","straightFlush","royalFlush","groupBy","list","grouper","fGrouper","item","fList","Array","Object","values","reduce","groups","group","push","groupHandBySuit","hand","keys","card","suit","groupHandByWeight","weight","map","cardWeight","parseInt","groupHand","num","rank","filter","sameCards","length","groupByPair","groupByThree","groupByFour","hasAce","includes","isFullHouse","isTwoPairs","isPair","isThreeofKind","isFourOfKind","isFlush","isHighCard","isStraightFlash","isFiveInRow","isRoyalFlash","max","Math","min","rateHand","handValue","message","createDeck","SUITS","RANKS","WEIGHT","undeck","i","j","shuffleDeck","deck","m","currentElem","remainElem","floor","random"],"mappings":"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","sourcesContent":["const HAND_VALUE = {\n  highCard: 1,\n  pair: 2,\n  twoPair: 3,\n  threeOfKind: 4,\n  straight: 5,\n  flush: 6,\n  fullHouse: 7,\n  fourOfKind: 8,\n  straightFlush: 9,\n  royalFlush: 10\n}\n\n\nconst groupBy = (list, grouper) => {\n    const fGrouper = typeof grouper === 'function' ? grouper : item => item[grouper];\n    const fList = list instanceof Array ? list : Object.values(list);\n  \n    return fList.reduce(\n      (groups, item) => {\n        const group = fGrouper(item);\n        if (!groups[group]) {\n            groups[group] = []\n        }\n        groups[group].push(item)\n        return groups;\n      },\n      {}\n    )\n  }\n  const groupHandBySuit = (hand) => {\n    return Object.keys(groupBy(hand, card => card.suit));\n  }\n  const groupHandByWeight = (hand) => {\n    return Object.keys(groupBy(hand, card => card.weight)).map((cardWeight) => parseInt(cardWeight));\n  }\n  const groupHand = (hand,num) => {\n    return Object.values(groupBy(hand, card => card.rank))\n    .filter(sameCards => sameCards.length === num);\n  }\n  \nconst groupByPair =(hand) => groupHand(hand, 2);\nconst groupByThree =(hand) => groupHand(hand, 3);\nconst groupByFour = (hand) => groupHand(hand, 4);\nconst hasAce = (hand) => groupHandByWeight(hand).includes(14);\nconst isFullHouse = (hand) => groupByPair(hand).length === 1 && groupByThree(hand).length === 1;\nconst isTwoPairs = (hand) => groupByPair(hand).length === 2;\nconst isPair = (hand) => groupByPair(hand).length === 1;\nconst isThreeofKind = (hand) => groupByThree(hand).length === 1;\nconst isFourOfKind = (hand) => groupByFour(hand).length === 1;\nconst isFlush = (hand) => groupHandBySuit(hand).length === 1;\nconst isHighCard = (hand) => groupHandByWeight(hand).length === 5;\nconst isStraightFlash = (hand) => isFlush(hand) && isFiveInRow(hand);\nconst isRoyalFlash = (hand) => isFlush(hand) && isFiveInRow(hand) && hasAce(hand);\nconst isFiveInRow = (hand) => {\n  let max = Math.max(...groupHandByWeight(hand)); \n  let min = Math.min(...groupHandByWeight(hand));\n  return max-min === groupHandByWeight(hand).length-1 && groupHandByWeight(hand).length === 5 ? true : false;\n};\n  \nexport const rateHand = (hand) => {\n    let handValue = null;\n    let message ='';\n    switch (true) {\n      case isFullHouse(hand):\n        handValue = HAND_VALUE.fullHouse\n        message = \"You have a Full House\";\n        return [handValue, message];\n      case isFourOfKind(hand):\n        handValue = HAND_VALUE.fourOfKind\n        message = \"You have four of a kind\";\n        return [handValue, message];\n      case isThreeofKind(hand):\n        handValue = HAND_VALUE.threeOfKind\n        message = \"You have three of a kind\";\n        return [handValue, message];\n      case isTwoPairs(hand):\n        handValue = HAND_VALUE.twoPair\n        message = \"You have two pairs\";\n        return [handValue, message];\n      case isPair(hand):\n        handValue = HAND_VALUE.pair\n        message = \"You have a pair\";\n        return [handValue, message];\n      case isRoyalFlash(hand):\n        handValue = HAND_VALUE.royalFlush\n        message = \"You have a Royal Flash\";\n        return [handValue, message];\n      case isStraightFlash(hand):\n        handValue = HAND_VALUE.straightFlush\n        message = \"You have a Straight Flash\";\n        return [handValue, message];\n      case isFlush(hand):\n        handValue = HAND_VALUE.flush\n        message = \"You have a flash\";\n        return [handValue, message];\n      case isFiveInRow(hand):\n        handValue = HAND_VALUE.straight\n        message = \"You have a straight\";\n        return [handValue, message]\n      case isHighCard(hand):\n        handValue = HAND_VALUE.highCard\n        message = \"No matching cards\";\n        return [handValue, message];\n    }\n  }\n\nexport const createDeck = () => {\n    const SUITS = [\"spades\", \"diams\", \"clubs\", \"hearts\"];\n    const RANKS = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n    const WEIGHT = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n    let undeck = [];\n    for (let i = 0; i < SUITS.length; i++) {\n      for (let j = 0; j < RANKS.length; j++){\n        let card = {rank: RANKS[j], suit: SUITS[i], weight: WEIGHT[j]};\n        undeck.push(card);\n      }\n    }\n    return undeck;\n}\nexport const shuffleDeck = (deck) => {\n    let m = deck.length, currentElem, remainElem;\n      while (m) {\n        remainElem = Math.floor(Math.random() * m--);\n        currentElem = deck[m];\n        deck[m] = deck[remainElem];\n        deck[remainElem] = currentElem;\n    } \n    return deck;\n  }\n\n"]},"metadata":{},"sourceType":"module"}