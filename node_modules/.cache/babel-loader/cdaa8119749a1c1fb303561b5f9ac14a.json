{"ast":null,"code":"const HAND_VALUE = {\n  highCard: 1,\n  pair: 2,\n  twoPair: 3,\n  threeOfKind: 4,\n  straight: 5,\n  flush: 6,\n  fullHouse: 7,\n  fourOfKind: 8,\n  straightFlush: 9,\n  royalFlush: 10\n};\n\nconst groupBy = (list, grouper) => {\n  const fGrouper = typeof grouper === 'function' ? grouper : item => item[grouper];\n  const fList = list instanceof Array ? list : Object.values(list);\n  return fList.reduce((groups, item) => {\n    const group = fGrouper(item);\n\n    if (!groups[group]) {\n      groups[group] = [];\n    }\n\n    groups[group].push(item);\n    return groups;\n  }, {});\n};\n\nconst groupHandBySuit = hand => {\n  return Object.keys(groupBy(hand, card => card.suit));\n};\n\nconst groupHandByWeight = hand => {\n  return Object.keys(groupBy(hand, card => card.weight)).map(cardWeight => parseInt(cardWeight));\n};\n\nconst groupHand = (hand, num) => {\n  return Object.values(groupBy(hand, card => card.rank)).filter(sameCards => sameCards.length === num);\n};\n\nconst groupByPair = hand => groupHand(hand, 2);\n\nconst groupByThree = hand => groupHand(hand, 3);\n\nconst groupByFour = hand => groupHand(hand, 4);\n\nconst hasAce = hand => groupHandByWeight(hand).includes(14);\n\nconst isFullHouse = hand => groupByPair(hand).length === 1 && groupByThree(hand).length === 1;\n\nconst isTwoPairs = hand => groupByPair(hand).length === 2;\n\nconst isPair = hand => groupByPair(hand).length === 1;\n\nconst isThreeofKind = hand => groupByThree(hand).length === 1;\n\nconst isFourOfKind = hand => groupByFour(hand).length === 1;\n\nconst isFlush = hand => groupHandBySuit(hand).length === 1;\n\nconst isHighCard = hand => groupHandByWeight(hand).length === 5;\n\nconst isStraightFlash = hand => isFlush(hand) && isFiveInRow(hand);\n\nconst isRoyalFlash = hand => isFlush(hand) && isFiveInRow(hand) && hasAce(hand);\n\nconst isFiveInRow = hand => {\n  let max = Math.max(...groupHandByWeight(hand));\n  let min = Math.min(...groupHandByWeight(hand));\n  return max - min === groupHandByWeight(hand).length - 1 && groupHandByWeight(hand).length === 5 ? true : false;\n};\n\nfunction rateHand(hand) {\n  let handValue = null;\n  let message = '';\n\n  switch (true) {\n    case isFullHouse(hand):\n      handValue = HAND_VALUE.fullHouse;\n      message = \"You have a Full House\";\n      return [handValue];\n\n    case isFourOfKind(hand):\n      handValue = HAND_VALUE.fourOfKind;\n      message = \"You have four of a kind\";\n      return [handValue];\n\n    case isThreeofKind(hand):\n      handValue = HAND_VALUE.threeOfKind;\n      message = \"You have three of a kind\";\n      return [handValue];\n\n    case isTwoPairs(hand):\n      handValue = HAND_VALUE.twoPair;\n      message = \"You have two pairs\";\n      return [handValue];\n\n    case isPair(hand):\n      handValue = HAND_VALUE.pair;\n      message = \"You have a pair\";\n      return [handValue];\n\n    case isRoyalFlash(hand):\n      handValue = HAND_VALUE.royalFlush;\n      message = \"You have a Royal Flash\";\n      return [handValue];\n\n    case isStraightFlash(hand):\n      handValue = HAND_VALUE.straightFlush;\n      message = \"You have a Straight Flash\";\n      return [handValue];\n\n    case isFlush(hand):\n      handValue = HAND_VALUE.flush;\n      message = \"You have a flash\";\n      return [handValue];\n\n    case isFiveInRow(hand):\n      handValue = HAND_VALUE.straight;\n      message = \"You have a straight\";\n      return [handValue];\n\n    case isHighCard(hand):\n      handValue = HAND_VALUE.highCard;\n      message = \"No matching cards\";\n      return [handValue];\n  }\n}\n\nexport default rateHand;","map":{"version":3,"sources":["/Users/alexis_fiz/Desktop/poker-rect/src/help/help.js"],"names":["HAND_VALUE","highCard","pair","twoPair","threeOfKind","straight","flush","fullHouse","fourOfKind","straightFlush","royalFlush","groupBy","list","grouper","fGrouper","item","fList","Array","Object","values","reduce","groups","group","push","groupHandBySuit","hand","keys","card","suit","groupHandByWeight","weight","map","cardWeight","parseInt","groupHand","num","rank","filter","sameCards","length","groupByPair","groupByThree","groupByFour","hasAce","includes","isFullHouse","isTwoPairs","isPair","isThreeofKind","isFourOfKind","isFlush","isHighCard","isStraightFlash","isFiveInRow","isRoyalFlash","max","Math","min","rateHand","handValue","message"],"mappings":"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","sourcesContent":["const HAND_VALUE = {\n  highCard: 1,\n  pair: 2,\n  twoPair: 3,\n  threeOfKind: 4,\n  straight: 5,\n  flush: 6,\n  fullHouse: 7,\n  fourOfKind: 8,\n  straightFlush: 9,\n  royalFlush: 10\n}\n\n\nconst groupBy = (list, grouper) => {\n    const fGrouper = typeof grouper === 'function' ? grouper : item => item[grouper];\n    const fList = list instanceof Array ? list : Object.values(list);\n  \n    return fList.reduce(\n      (groups, item) => {\n        const group = fGrouper(item);\n        if (!groups[group]) {\n            groups[group] = []\n        }\n        groups[group].push(item)\n        return groups;\n      },\n      {}\n    )\n  }\n  const groupHandBySuit = (hand) => {\n    return Object.keys(groupBy(hand, card => card.suit));\n  }\n  const groupHandByWeight = (hand) => {\n    return Object.keys(groupBy(hand, card => card.weight)).map((cardWeight) => parseInt(cardWeight));\n  }\n  const groupHand = (hand,num) => {\n    return Object.values(groupBy(hand, card => card.rank))\n    .filter(sameCards => sameCards.length === num);\n  }\n  \n  const groupByPair =(hand) => groupHand(hand, 2);\n  const groupByThree =(hand) => groupHand(hand, 3);\n  const groupByFour = (hand) => groupHand(hand, 4);\n  const hasAce = (hand) => groupHandByWeight(hand).includes(14);\n  const isFullHouse = (hand) => groupByPair(hand).length === 1 && groupByThree(hand).length === 1;\n  const isTwoPairs = (hand) => groupByPair(hand).length === 2;\n  const isPair = (hand) => groupByPair(hand).length === 1;\n  const isThreeofKind = (hand) => groupByThree(hand).length === 1;\n  const isFourOfKind = (hand) => groupByFour(hand).length === 1;\n  const isFlush = (hand) => groupHandBySuit(hand).length === 1;\n  const isHighCard = (hand) => groupHandByWeight(hand).length === 5;\n  const isStraightFlash = (hand) => isFlush(hand) && isFiveInRow(hand);\n  const isRoyalFlash = (hand) => isFlush(hand) && isFiveInRow(hand) && hasAce(hand);\n  const isFiveInRow = (hand) => {\n    let max = Math.max(...groupHandByWeight(hand)); \n    let min = Math.min(...groupHandByWeight(hand));\n    return max-min === groupHandByWeight(hand).length-1 && groupHandByWeight(hand).length === 5 ? true : false;\n  };\n  \n  function rateHand(hand){\n    let handValue = null;\n    let message ='';\n    switch (true) {\n      case isFullHouse(hand):\n        handValue = HAND_VALUE.fullHouse\n        message = \"You have a Full House\";\n        return [handValue, ];\n      case isFourOfKind(hand):\n        handValue = HAND_VALUE.fourOfKind\n        message = \"You have four of a kind\";\n        return [handValue, ];\n      case isThreeofKind(hand):\n        handValue = HAND_VALUE.threeOfKind\n        message = \"You have three of a kind\";\n        return [handValue, ];\n      case isTwoPairs(hand):\n        handValue = HAND_VALUE.twoPair\n        message = \"You have two pairs\";\n        return [handValue, ];\n      case isPair(hand):\n        handValue = HAND_VALUE.pair\n        message = \"You have a pair\";\n        return [handValue, ];\n      case isRoyalFlash(hand):\n        handValue = HAND_VALUE.royalFlush\n        message = \"You have a Royal Flash\";\n        return [handValue, ];\n      case isStraightFlash(hand):\n        handValue = HAND_VALUE.straightFlush\n        message = \"You have a Straight Flash\";\n        return [handValue, ];\n      case isFlush(hand):\n        handValue = HAND_VALUE.flush\n        message = \"You have a flash\";\n        return [handValue, ];\n      case isFiveInRow(hand):\n        handValue = HAND_VALUE.straight\n        message = \"You have a straight\";\n        return [handValue, ]\n      case isHighCard(hand):\n        handValue = HAND_VALUE.highCard\n        message = \"No matching cards\";\n        return [handValue, ];\n    }\n  }\n\nexport default rateHand;"]},"metadata":{},"sourceType":"module"}